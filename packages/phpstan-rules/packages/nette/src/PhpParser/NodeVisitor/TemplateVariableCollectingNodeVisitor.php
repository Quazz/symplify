<?php

declare(strict_types=1);

namespace Symplify\PHPStanRules\Nette\PhpParser\NodeVisitor;

use PhpParser\Node;
use PhpParser\Node\Expr;
use PhpParser\Node\Expr\Variable;
use PhpParser\Node\Stmt;
use PhpParser\Node\Stmt\Foreach_;
use PhpParser\NodeVisitorAbstract;
use Symplify\Astral\ValueObject\AttributeKey;

final class TemplateVariableCollectingNodeVisitor extends NodeVisitorAbstract
{
    /**
     * @var string[]
     */
    private $userVariableNames = [];

    /**
     * @param array<string> $defaultVariableNames
     */
    public function __construct(
        private array $defaultVariableNames
    ) {
    }

    /**
     * @param Stmt[] $nodes
     * @return Stmt[]
     */
    public function beforeTraverse(array $nodes): array
    {
        // reset to avoid used variable name in next analysed file
        $this->userVariableNames = [];

        return $nodes;
    }

    public function enterNode(Node $node): Node|null
    {
        if (! $node instanceof Variable) {
            return null;
        }

        if ($this->isGeneratedVariable($node)) {
            return null;
        }

        if ($node->name instanceof Expr) {
            return null;
        }

        $this->userVariableNames[] = $node->name;
        return null;
    }

    /**
     * @return string[]
     */
    public function getUsedVariableNames(): array
    {
        return array_diff($this->userVariableNames, $this->defaultVariableNames);
    }

    /**
     * Is this variable generated by latte functions/macros?
     */
    private function isGeneratedVariable(Variable $variable): bool
    {
        $parent = $variable->getAttribute(AttributeKey::PARENT);
        if (! $parent instanceof Foreach_) {
            return false;
        }

        return in_array($variable, [$parent->keyVar, $parent->valueVar, true], true);
    }
}
